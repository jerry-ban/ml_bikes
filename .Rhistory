if(dtrmnt==0){
warning("matrix is not inversible!")
return
}
else{
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
}
cacheSolve(yy)
ls
str(ls)
ls()
m<- matrix(rnorm(12), 3,4)
str(m)
library(datasets)
str(airquality)
rnorm()
dnorm()
dnorm(x, mean =0, sd =1, log = FALSE)
x
x
dnorm(x, mean =0, sd =1, log = FALSE)
# to simulate random number, usually need to set.seed() to reproduce same instances
set.seed(1)
rnorm(10,5,1)
rnorm(10,5,1)
set.seed(1)
rnorm(10,5,1)
rnorm(10,5,1)
rpois(10, 1) # 10 randoms, with rate 1
rpois(10, 2)
rpois(10, 10)
ppois(2,2)
ppois(4,2)  # rate 2 , posb<=4
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom(100,1, 0.5) # n=1, p = 0.5
x
e<-rnorm(100,0,2)
y<- 0.5 + 2*x + e
summary(y)
plot(x,y)
x<-rbinom(100,2, 0.5) # n=1, p = 0.5
y<- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(3)
x<- rnorm(100) # n=1, p = 0.5
log.mu<- 0.5 +0.3*x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y)
# sample function
set.seed(1)
sample(1:10,4) # 4 numbers from 1:10
sample(letters, 4)
sample(1:10)
sample(1:10) # permutation
sample(1:10) # permutation
sample(1:10,replace=TRUE) # 4 numbers
system.time()
system.time(colMeans(data("airquality")))
head(airquality)
system.time(colMeans(airquality)))
system.time(colMeans(airquality))
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.sohu.com"))
system.time(svd(x))
x<- hilbert(2000)
system.time(svd(x))  #
system.time(svd(x))  #
x<- hilbert(2000)
hilbert<-function(n){
i<- 1:n
1/outer(i-1,i,"+")
}
x<- hilbert(2000)
system.time(svd(x))  #
x<- hilbert(1500)
system.time(svd(x))  #
x<- hilbert(1200)
system.time(svd(x))  #
x<- hilbert(1000)
system.time(svd(x))  #
system.time({
n<-1000
r<-numberic(n)
for(i in 1:n){
x<-rnorm(n)
r[i] <-mean(x)
}
})
system.time({
n<-1000
r<-numberic(n)
for(i in 1:n){
x<-rnorm(n)
r[i] <- mean(x)
}
})
system.time({
n<-1000
r<-numeric(n)
for(i in 1:n){
x<-rnorm(n)
r[i] <- mean(x)
}
})
Rprof(lm(y-x, airquality$Ozone,airquality$Month))
Rprof(lm( airquality$Ozone,airquality$Month))
str(Rprof)
Rproof()
Rprof()
lm(airquality)
summaryRprof()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
plot(x,y)
source('C:/_research/coursera_rprog/lecture4.R', echo=TRUE)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
raw_data <- read.table("./hw01/household_power_consumption.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
col_names <-names(raw_data)
raw_data$Timestamp = strptime(paste(raw_data$Date, raw_data$Time), "%d/%m/%Y %H:%M:%S")
raw_data["Date"]=as.Date(raw_data$Date, format="%d/%m/%Y")
data = subset(raw_data, Date >= "2007-02-01" & Date <=" 2007-02-02")
#data$time = strptime(data$Time,  format=" %H:%M:%S")
head(data)
str(data)
head(raw_data$Timestamp)
getwp()
getwp()
getwd()
setwd("C:/_research/homeowrks/ExData_Plotting1")
raw_data <- read.table("./household_power_consumption.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
getwd()
setwd("C:/_research/homeowrks/ExData_Plotting1")
getwd()
setwd("C:/_research/homeowrks/ExData_Plotting1")
setwd("C:\_research\homeowrks\ExData_Plotting1")
getwd()
getwd()
setwd("C:/_research/homeowrks/hw001/ExData_Plotting1")
raw_data <- read.table("./household_power_consumption.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
rm(list=ls(all=TRUE))
library(lubridate)
library(dplyr)
library("ggplot2")
library("timeDate")
library(dummies)
library(plotly)
library("ggmap")
library("ggrepel")
library("reshape2")
library(forecast)
library(knitr)
#install.packages("devtools")
library(devtools)
#require(devtools)
#https://github.com/tqchen/xgboost/tree/master/R-package
#install.packages("xgboost", repos=c("http://dmlc.ml/drat/", getOption("repos")), type="source")
library("xgboost")
library("randomForest")
library(glmnet)
#install.packages("h2o")
library(h2o)
#install.packages("caret")
install.packages("lattice")
install.packages("lattice")
library(caret)
##################################################################
##                   Reading data                               ##
##################################################################
setwd("c:/_research/biks")
trip = read.csv("trip.csv")
station =  read.csv("station.csv")
weather = read.csv("weather.csv")
trip$start_date = mdy_hm(as.character(trip$start_date))
trip$end_date = mdy_hm(as.character(trip$end_date))
trip$date = as.Date(trip$start_date)
trip$end_date = as.Date(trip$end_date)
trip_count = trip %>% group_by(date) %>% summarise(count = n())
##feature engineer, create month, day of week, hour of day.
trip$start_month = lubridate::month(trip$start_date)
trip$start_wday = lubridate::wday(as.Date(trip$start_date), label = TRUE)
trip$start_hour = lubridate::hour(trip$start_date)
trip$end_month = lubridate::month(trip$end_date)
trip$end_wday = lubridate::wday(as.Date(trip$end_date), label = TRUE)
trip$end_hour = lubridate::hour(trip$end_date)
##convert seconds to minutes
trip$duration = trip$duration/60
trip$is_weekend = ifelse(trip$start_wday %in% c("Sun", "Sat"), 1, 0)
trip$is_weekend = factor(trip$is_weekend, labels = c("weekday", "weekend"))
trip$is_weekend_v2 = ifelse(trip$end_wday %in% c("Sun", "Sat"), 1, 0)
trip$is_weekend_v2 = factor(trip$is_weekend_v2, labels = c("weekday", "weekend"))
##############insight getting##########
trip_date = trip %>% group_by(date) %>% summarise(trip_count = n())
ggplot(trip_date, aes(x = date, y = trip_count)) + geom_point() + geom_smooth(color = "#1A1A1A",method = 'loess') +
labs(x = "Date", y = "# of Trips", title = "Daily # of Bicylcle Trips from 2013 - 2015") +
theme(plot.title = element_text(hjust = 0.5))
head(trip_date)
tail(trip_date)
isweekend_date = trip %>% group_by(date, is_weekend) %>% summarise(count = n())
isweekend_date$is_weekend = factor(isweekend_date$is_weekend, labels = c("weekday", "weekend"))
ggplot(isweekend_date, aes(x = date, y=count)) + geom_point(aes(color = is_weekend), size = 3, alpha = 0.65) +
labs(x = "Date", y = "Total # of Bicycle Trips") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(isweekend_date, aes(x = date, y=count)) +
geom_point() +
facet_wrap(~ is_weekend) +
geom_smooth(se = F, method = 'loess') +
labs(x = "Date", y = "Total # of Bicycle Trips") +
theme(plot.title = element_text(hjust = 0.5))
hour_format <- c(paste(c(12,1:11),"AM"), paste(c(12,1:11),"PM"))
trip$start_hour <- factor(trip$start_hour, level = 0:23, label = hour_format)
trip_hour_wday = trip %>% group_by(start_wday, start_hour) %>% summarise(count=n())
##time-diff and week-diff
ggplot(trip_hour_wday, aes(x = start_hour, y = start_wday, fill = count)) + geom_tile() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6), legend.title = element_blank(),
legend.position = "top", legend.direction = "horizontal") +
labs(x = "Hour of Day", y = "Day of Week of trips", title = "# of bicycle trips ") +
scale_fill_gradient(low = "white", high = "black") +
theme(plot.title = element_text(hjust = 0.5))
##subscriber and none
ggplot(trip, aes(x = date)) +
geom_bar(aes(color=subscription_type), stat="count", position = "stack",fill="white") +
facet_grid(~is_weekend) +
labs(x = "Day of Week", y = "# of trips",
title = "Customer Vs.Subscriber on Weekend and Weekdays") +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
station_trip = merge(trip, station, by.x = "start_station_id", by.y = "id")
##city-wise
ggplot(station_trip, aes(x = date)) +
geom_bar(aes(color=subscription_type), stat="count", position = "stack") +
facet_wrap(~city, scales = "free_y") +
labs(x = "Day of Week", y = "# of trips",
title = "Customer Vs.Subscriber by City") +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_blank())
city_wday = station_trip %>% group_by(start_wday, city) %>% summarise(count = n())
g = ggplot(city_wday, aes(y = city, x = start_wday)) +
geom_point(aes(size = count, col = count)) +
scale_size(range = c(1,10)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none")
ggplotly(g, tooltip = c("x", "y", "colour"))
bbox = c(-122.4990, 37.31072, -121.7800, 37.88100)
sf = get_map(location = bbox, source = "stamen", maptype = "toner-lite")
map_trip = station_trip %>% group_by(long, lat, zip_code) %>% summarise(count = n())
ggmap(sf) + geom_point(data = map_trip, aes(x = long, y = lat, size = count, color = count)) +
scale_size(name = "# Total Trips", range = c(3, 12))  + theme(legend.position = "none")
names(station_trip)[22] = "start_lat"
names(station_trip)[23] = "start_long"
end_station_trip = merge(trip, station, by.x = "end_station_id", by.y = "id")
names(end_station_trip)[22] = "end_lat"
names(end_station_trip)[23] = "end_long"
road_df = merge(station_trip, end_station_trip, by = "id") %>%
select ("id","start_lat", "start_long", "end_lat", "end_long", "city.y", "city.x") %>%
filter(city.y == "San Francisco" & city.x == "San Francisco")
road_map = road_df %>% group_by(start_lat, start_long, end_lat, end_long) %>% summarise(num_trips = n())
station_sf = station %>% filter(city=="San Francisco")
ggplot(road_map) + geom_segment(aes(x=start_long, xend = end_long, y = start_lat, yend=end_lat,
size = num_trips, colour = num_trips, alpha = num_trips)) +
geom_point(data = station_sf, aes(x=long, y=lat), size = 4) +
geom_text_repel(data = station_sf, aes(x=long, y=lat, label=name), size = 4) +
theme_light(base_size = 10) +
scale_colour_gradient(low ="#132B43", high = "#56B1F7", limits=c(0, max(road_map$num_trips)), name="Number of Trips") +
scale_alpha(limits=c(0, max(road_map$num_trips)), guide = F) +
scale_size(limits=c(0, max(road_map$num_trips)), guide = F) +
xlab("") + ylab("") + coord_fixed() +
theme(axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank())
trip$start_wday <- factor(trip$start_wday)
summary(trip_date)
summary(weather)
summary(lubridate::mdy(as.character(weather$date)))
weather$date = lubridate::mdy(as.character(weather$date))
#set nan value as "Normal" in the event
levels(weather$events) = c(levels(weather$events), "Normal")
weather$events[weather$events==''] = "Normal"
weather$events[weather$events=='rain'] = "Rain"
weather$events = droplevels(weather$events, except = c("Normal", "Fog", "Rain", "Fog-Rain", "Rain-Thunderstorm"))
summary(weather)
weather$precipitation_inches = as.numeric(as.matrix(weather$precipitation_inches))
weather = weather %>% group_by(date) %>% mutate(precipitation_median = median(precipitation_inches, na.rm=T))
weather$precipitation_inches = ifelse(is.na(weather$precipitation_inches), weather$precipitation_median, weather$precipitation_inches)
weather$precipitation_inches[is.na(weather$precipitation_inches)] = 0
summary(weather)
weather = weather %>% group_by(max_wind_Speed_mph) %>% mutate(gust_median = median(max_gust_speed_mph, na.rm=T))
weather$max_gust_speed_mph = ifelse(is.na(weather$max_gust_speed_mph), weather$gust_median, weather$max_gust_speed_mph)
weather$month = lubridate::month(weather$date)
weather$wday = wday(weather$date)
weather$year = lubridate::year(weather$date)
weather$day = lubridate::day(weather$date)
listHolidays()
Holiday = c(
as.Date(USChristmasDay(2013)),
as.Date(USColumbusDay(2013)),
as.Date(USCPulaskisBirthday(2013)),
as.Date(USDecorationMemorialDay(2013)),
as.Date(USElectionDay(2013)),
as.Date(USGoodFriday(2013)),
as.Date(USInaugurationDay(2013)),
as.Date(USIndependenceDay(2013)),
as.Date(USLaborDay(2013)),
as.Date(USLincolnsBirthday(2013)),
as.Date(USMemorialDay(2013)),
as.Date(USMLKingsBirthday(2013)),
as.Date(USNewYearsDay(2013)),
as.Date(USPresidentsDay(2013)),
as.Date(USThanksgivingDay(2013)),
as.Date(USVeteransDay(2013)),
as.Date(USWashingtonsBirthday(2013)),
as.Date(USChristmasDay(2014)),
as.Date(USColumbusDay(2014)),
as.Date(USCPulaskisBirthday(2014)),
as.Date(USDecorationMemorialDay(2014)),
as.Date(USElectionDay(2014)),
as.Date(USGoodFriday(2014)),
as.Date(USInaugurationDay(2014)),
as.Date(USIndependenceDay(2014)),
as.Date(USLaborDay(2014)),
as.Date(USLincolnsBirthday(2014)),
as.Date(USMemorialDay(2014)),
as.Date(USMLKingsBirthday(2014)),
as.Date(USNewYearsDay(2014)),
as.Date(USPresidentsDay(2014)),
as.Date(USThanksgivingDay(2014)),
as.Date(USVeteransDay(2014)),
as.Date(USWashingtonsBirthday(2014)),
as.Date(USChristmasDay(2015)),
as.Date(USColumbusDay(2015)),
as.Date(USCPulaskisBirthday(2015)),
as.Date(USDecorationMemorialDay(2015)),
as.Date(USElectionDay(2015)),
as.Date(USGoodFriday(2015)),
as.Date(USInaugurationDay(2015)),
as.Date(USIndependenceDay(2015)),
as.Date(USLaborDay(2015)),
as.Date(USLincolnsBirthday(2015)),
as.Date(USMemorialDay(2015)),
as.Date(USMLKingsBirthday(2015)),
as.Date(USNewYearsDay(2015)),
as.Date(USPresidentsDay(2015)),
as.Date(USThanksgivingDay(2015)),
as.Date(USVeteransDay(2015)),
as.Date(USWashingtonsBirthday(2015))
)
weather$isholiday = ifelse(weather$date %in% Holiday, 1, 0)
weather$events = as.factor(as.character(weather$events))
indx = !(sapply(weather, is.factor) | sapply(weather,is.Date))
f=function(x){
x<-as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
x[is.na(x)] =median(x, na.rm=TRUE) #convert the item with NA to median value from the column
x #display the column
}
weather[,indx]=apply(weather[,indx],2,f)
summary(weather)
plot(weather$date,weather$max_sea_level_pressure_inches)
names(weather)
zip_city_match = data.frame(zip_code = unique(weather$zip_code), city= c("San Francisco","Redwood City",
"Palo Alto","Mountain View","San Jose"))
weather = merge(weather,zip_city_match,by = "zip_code")
station
station$installation_date = mdy(as.character(station$installation_date))
station_name = station[,c("name","city")]
names(station_name) = c("start_station_name","city")
trip_num = merge(trip,station_name,by=c("start_station_name"))
trip_num = trip_num %>% group_by(date,city,start_hour) %>% summarise(count = n())
dim(trip_num)
summary(trip_num)
summary(weather)
df_v2 = merge(trip_num, weather, by = c("date","city"),x.all=TRUE)
hist(df_v2$count)
dim(weather)
dim(trip_num)
dim(df_v2)
summary(df_v2)
hist(df_v2$count)
df_v2$month <- as.factor(df_v2$month)
df_v2$year <- as.factor(df_v2$year)
df_v2$isholiday <- as.numeric(df_v2$isholiday)
df_v2$count <- as.numeric(df_v2$count)
summary(df_v2)
dim(df_v2)
df_v2$wday = as.factor(df_v2$wday)
df_v2 = df_v2[,!(names(df_v2) %in% c("zip_code"))]
dim(df_v2)
summary(df_v2)
dim(df_v2)
dim(df_v2)
names(df_v2)
set.seed(0226)
train_sample = c(1:nrow(df_v2))[df_v2$date<"2015-03-31"]
length(train_sample)/nrow(df_v2)
train_data = data.frame(df_v2[train_sample, -1])
test_data = data.frame(df_v2[-train_sample, -1])
train_data.y = df_v2$count[train_sample]
test_data.y =df_v2$count[-train_sample]
dim(train_data)
names(train_data)
summary(train_data)
require(caret)
flds <- createFolds(train_data$count, k = 10, list = TRUE, returnTrain = FALSE)
lm1 <- lm(count~., data = train_data )
summary(lm1)
yhat <- predict(lm1,train_data)
r2insample <- (sum((yhat-mean(train_data.y))^2))/(sum((train_data.y-mean(train_data.y))^2))
r2insample
boost.a = data.frame(df_v2[train_sample, c('date','count')],yhat)
names(boost.a) = c("date", "Actual", "Prediction")
boost.AP = reshape2::melt(boost.a, id = "date")
boost.AP = boost.AP %>% group_by(date,variable) %>% summarise(value = sum(value))
boost.AP$variable= as.factor(boost.AP$variable)
ggplot(boost.AP, aes(x = date, y = value, colour = variable)) + geom_line() +
labs(x = "Date", y = "number of trips", title = "Predicted Values vs Actual Values") +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.position="top")
dim(train_data)
accuracy(lm1)
rmsein <- sqrt(mean((yhat-train_data.y)^2))
rmsein
View(train_data)
summary(train_data)
train_sample
length(trani_sample)
length(train_sample)
length(train_data)
dim(train_data)
train_data
dim(train_data)
length(train_data)
summary(train_sample)
head(train_sample)
boost.a
reshape2::melt(boost.a, id = "date")
train_data[train_data$year==2013 & train_data$month==8]
train_data[train_data$year==2013 & train_data$month==8,]
train_data[train_data$year==2013 & train_data$month==8, c("count")]
train_data[train_data$year==2013 & train_data$month==8& train_data$day=1==8, c("count")]
train_data[train_data$year==2013 & train_data$month==8& train_data$day==1, c("count")]
train_data[train_data$year==2013 & train_data$month==8& train_data$day==29, c("count")]
sum(train_data[train_data$year==2013 & train_data$month==8& train_data$day==29, c("count")])
ggplot(boost.AP, aes(x = date, y = value, colour = variable)) + geom_line() +
labs(x = "Date", y = "number of trips", title = "Predicted Values vs Actual Values") +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "transparent",colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.position="top")
head(train_data)
accuracy(lm1)
rmsein <- sqrt(mean((yhat-train_data.y)^2))
rmsein
yhat.boost <- predict(lm1,test_data)
r2outsample <- (sum((yhat.boost-mean(test_data.y))^2))/(sum((test_data.y-mean(test_data.y))^2))
r2outsample
lmerror <- sqrt(mean((yhat.boost-test_data.y)^2))
lmerror
Lmmae = mean(abs(yhat.boost-test_data.y))
hist(abs(yhat-train_data$count))
hist((yhat.boost-test_data$count)^2)
rownames(data.frame(train_data[,c("city","start_hour","month","wday","count")],predicted = yhat)[order(abs(yhat-train_data$count),decreasing = T)[1:20],])
a <- lm1$coefficients[-1]
lmcoef<- sort(a,decreasing = TRUE)
lmcoef
names(lmcoef)
boost.a =  data.frame(df_v2[-train_sample, c('date','month','wday','city','start_hour','count')],yhat.boost )
names(boost.a) = c("date",'month','wday','city','start_hour', "Actual", "Prediction")
summary(boost.a)
checksomething = boost.a[boost.a$month=="7",]
checksomething[order(abs(checksomething$Actual - checksomething$Prediction),decreasing = TRUE)[1:30],]
usecoef <- lm1$coefficients
usecoef[is.na(usecoef)]<-0
model.matrix(count~., data = df_v2[36232,-1]) %*% usecoef
model.matrix(count~., data = df_v2[36232,-1]) * usecoef
